{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpert","categories","divRoot","document","getElementById","ReactDOM","render"],"mappings":"6LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,0BAAMC,SATa,SAAAC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,OAKhB,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAhBoB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEwBF,EAFxB,+DAGAG,MAAMD,GAHN,cAGbE,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAVnB,kBAaZK,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAEnC,OACE,yBAAKa,UAAU,0CACb,yBAAKC,IAAKd,EAAKe,IAAKN,IACpB,2BAAIA,KCHGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACZd,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OARAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAAAhB,GACrBc,EAAS,CACPf,KAAMC,EACNY,SAAS,SAGZ,CAACnB,IACGoB,EDX0BI,CAAaxB,GAAjCY,EAD0B,EAC/BN,KAAaa,EADkB,EAClBA,QAErB,OACE,oCACE,wBAAIJ,UAAU,qCAAqCf,GAChDmB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEe3BiB,EAxBG,WAAO,IAAD,EACcxC,mBAAS,CAAC,cADxB,mBACfyC,EADe,KACH1C,EADG,KAStB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG0C,EAAWnB,KAAI,SAAAR,GAAQ,OACtB,kBAAC,EAAD,CAASyB,IAAKzB,EAAUA,SAAUA,UChBtC4B,G,MAAWC,SAASC,eAAe,SACzCC,IAASC,OAAO,kBAAC,EAAD,MAAgBJ,I","file":"static/js/main.88774c35.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n\r\n  const handleInputChange = e => {\r\n    setInputValue(e.target.value)\r\n  }\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    \r\n    if(inputValue.trim().length > 2){\r\n        setCategories(cat => [inputValue,...cat ])\r\n        setInputValue(\"\")\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n    </form>\r\n  )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url =\r\n     `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=Gy4hCO8H2zcdMCjGoQSTe3SvfxftgkkZ` \r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n      }\r\n    })\r\n    return gifs\r\n  }","import React from \"react\"\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n   \r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\nimport { GifGridItem } from \"./GifGridItem\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data:images, loading } = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n        <div className=\"card-grid\">\r\n          {images.map(img => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n     \r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = category => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n  useEffect(() => {\r\n    getGifs(category).then(gifs => {\r\n      setState({\r\n        data: gifs,\r\n        loading: false\r\n      })\r\n    })\r\n  }, [category]) \r\n  return state\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { AddCategory } from \"./components/AddCategory\"\r\nimport { GifGrid } from \"./components/GifGrid\"\r\n\r\nconst GifExpert = () => {\r\n  const [categories, setCategories] = useState([\"Samurai X\"])\r\n\r\n  //handleAdd\r\n  /*  const handleAdd = () => {\r\n   setCategories([...categories, \"XMEN\"])\r\n    setCategories(cat => [...cat, \"XMEN\"])\r\n  } */\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map(category => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpert\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport GifExpert from \"./GifExpertApp\"\n\nimport \"./index.css\"\nconst divRoot =  document.getElementById(\"root\")\nReactDOM.render(<GifExpert /> , divRoot)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}